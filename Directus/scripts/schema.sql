drop TABLE IF EXISTS PAYMENT CASCADE;
drop TABLE IF EXISTS PAYMENT_STATUS CASCADE;
drop TABLE IF EXISTS PAYMENT_METHOD CASCADE;
drop TABLE IF EXISTS RESERVATION CASCADE;
drop TABLE IF EXISTS RESERVATION_STATUS CASCADE;
drop TABLE IF EXISTS REVIEW CASCADE;
drop TABLE IF EXISTS ITEM CASCADE;
drop TABLE IF EXISTS CATEGORY CASCADE;
drop TABLE IF EXISTS ITEM_STATUS CASCADE;
drop TABLE IF EXISTS NOTIFICATIONS CASCADE;
drop TABLE IF EXISTS NOTIFICATION_TYPE CASCADE;
drop TABLE IF EXISTS USER_PROFILE CASCADE;

-- Tabla PROFILE
CREATE TABLE USER_PROFILE (
    id SERIAL PRIMARY KEY,
    address TEXT,
    profile_photo TEXT,
    user_id UUID REFERENCES directus_users(id) ON DELETE CASCADE
);

-- Tabla NOTIFICATION_TYPE
CREATE TABLE NOTIFICATION_TYPE (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Tabla NOTIFICATION
CREATE TABLE NOTIFICATIONS (
    id SERIAL PRIMARY KEY,
    content TEXT NOT NULL,
    send_date TIMESTAMP,
    profile_id INT,
    notification_type_id INT,
    FOREIGN KEY (profile_id) REFERENCES USER_PROFILE(id),
    FOREIGN KEY (notification_type_id) REFERENCES NOTIFICATION_TYPE(id)
);

-- Tabla ITEM_STATUS
CREATE TABLE ITEM_STATUS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Tabla CATEGORY
CREATE TABLE CATEGORY (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Tabla ITEM
CREATE TABLE ITEM (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    price_per_day DECIMAL(10, 2),
    location VARCHAR(255),
    availability BOOLEAN DEFAULT TRUE,
    photo TEXT,
    profile_id INT,
    category_id INT,
    status_id INT,
    FOREIGN KEY (profile_id) REFERENCES USER_PROFILE(id),
    FOREIGN KEY (category_id) REFERENCES CATEGORY(id),
    FOREIGN KEY (status_id) REFERENCES ITEM_STATUS(id)
);

-- Tabla REVIEW
CREATE TABLE REVIEW (
    id SERIAL PRIMARY KEY,
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    publication_date TIMESTAMP,
    profile_id INT,
    item_id INT,
    FOREIGN KEY (profile_id) REFERENCES USER_PROFILE(id),
    FOREIGN KEY (item_id) REFERENCES ITEM(id)
);

-- Tabla RESERVATION_STATUS
CREATE TABLE RESERVATION_STATUS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Tabla RESERVATION
CREATE TABLE RESERVATION (
    id SERIAL PRIMARY KEY,
    start_date DATE NOT NULL,
    completion_date DATE,
    total_price DECIMAL(10, 2),
    profile_id INT,
    item_id INT,
    status_id INT,
    FOREIGN KEY (profile_id) REFERENCES USER_PROFILE(id),
    FOREIGN KEY (item_id) REFERENCES ITEM(id),
    FOREIGN KEY (status_id) REFERENCES RESERVATION_STATUS(id)
);

-- Tabla PAYMENT_METHOD
CREATE TABLE PAYMENT_METHOD (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

-- Tabla PAYMENT_STATUS
CREATE TABLE PAYMENT_STATUS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- Tabla PAYMENT
CREATE TABLE PAYMENT (
    id SERIAL PRIMARY KEY,
    amount DECIMAL(10, 2) NOT NULL,
    payment_date DATE,
    reservation_id INT,
    status_id INT,
    method_id INT,
    FOREIGN KEY (reservation_id) REFERENCES RESERVATION(id),
    FOREIGN KEY (status_id) REFERENCES PAYMENT_STATUS(id),
    FOREIGN KEY (method_id) REFERENCES PAYMENT_METHOD(id)
);
